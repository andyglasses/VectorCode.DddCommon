namespace VectorCode.DddCommon;

/// <summary>
/// Basic set of functions (CRUD) needed to interact with an aggregate root repository which supports version-ing / timestamps / etags for concurrency
/// </summary>
/// <typeparam name="TEntity">Entity Type</typeparam>
/// <typeparam name="TIdentity">Entity Id type</typeparam>
/// <typeparam name="TDto">Entity dto type</typeparam>
/// <typeparam name="TVersion">Version type</typeparam>
public interface IAggregateRootRepository<TEntity, TIdentity, TDto, TVersion> where TEntity : AggregateRoot<TIdentity, TDto, TVersion>
  where TIdentity : notnull
{
  /// <summary>
  /// Fetches an entity by its id, returning null if not found
  /// </summary>
  /// <param name="id">Entities identity value</param>
  /// <param name="cancellationToken">Cancellation token for async actions</param>
  /// <returns></returns>
  Task<TEntity?> FetchById(TIdentity id, CancellationToken cancellationToken);

  /// <summary>
  /// Inserts a new entity into the repository, returning the new entity's id.  
  /// Depending on the implementation and technology used, the id may be generated by the repository or by the entity itself.
  /// </summary>
  /// <param name="entity">The entity to insert</param>
  /// <param name="cancellationToken">Cancellation token for async actions</param>
  /// <returns>Entities identifier value</returns>
  Task<TIdentity> Insert(TEntity entity, CancellationToken cancellationToken);

  /// <summary>
  /// Updates an existing entity in the repository
  /// </summary>
  /// <param name="entity">The entity to update</param>
  /// <param name="cancellationToken">Cancellation token for async actions</param>
  /// <returns></returns>
  Task Update(TEntity entity, CancellationToken cancellationToken);

  /// <summary>
  /// Deletes an entity from the repository. 
  /// </summary>
  /// <param name="entity">Entity's being deleted</param>
  /// <param name="cancellationToken">Cancellation token for async actions</param>
  /// <returns></returns>
  Task Delete(TEntity entity, CancellationToken cancellationToken);
}
