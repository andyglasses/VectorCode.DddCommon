namespace VectorCode.DddCommon;

/// <summary>
/// Basic set of functions (CRUD) needed to interact with an entity repository
/// </summary>
/// <typeparam name="TEntity">Entity Type</typeparam>
/// <typeparam name="TIdentity">Entity Id type</typeparam>
/// <typeparam name="TDto">Entity dto type</typeparam>
public interface IBaseEntityRepository<TEntity, TIdentity, TDto> where TEntity : BaseEntity<TIdentity, TDto>
  where TIdentity : notnull
{
  /// <summary>
  /// Fetches an entity by its id, returning null if not found
  /// </summary>
  /// <param name="id">Entities identity value</param>
  /// <returns></returns>
  Task<TDto?> FetchById(TIdentity id);

  /// <summary>
  /// Inserts a new entity into the repository, returning the new entity's id.  
  /// Depending on the implentation and technology used, the id may be generated by the repository or by the entity itself.
  /// </summary>
  /// <param name="entity">The entity to insert</param>
  /// <returns>Entities identifier value</returns>
  Task<TIdentity> Insert(TEntity entity);

  /// <summary>
  /// Updates an existing entity in the repository
  /// </summary>
  /// <param name="entity">The entity to update</param>
  /// <returns></returns>
  Task Update(TEntity entity);

  /// <summary>
  /// Deletes an entity from the repository.  This will not throw an error if the entity does not exist.
  /// </summary>
  /// <param name="id">Entity's identifier value</param>
  /// <returns></returns>
  Task Delete(TIdentity id);
}
